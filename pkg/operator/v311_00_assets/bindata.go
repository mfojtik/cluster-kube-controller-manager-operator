// Code generated by go-bindata.
// sources:
// bindata/v3.11.0/kube-controller-manager/cm.yaml
// bindata/v3.11.0/kube-controller-manager/defaultconfig.yaml
// bindata/v3.11.0/kube-controller-manager/deployment.yaml
// bindata/v3.11.0/kube-controller-manager/openshift-kube-controller-manager-ns.yaml
// bindata/v3.11.0/kube-controller-manager/operator-config.yaml
// bindata/v3.11.0/kube-controller-manager/public-info-role.yaml
// bindata/v3.11.0/kube-controller-manager/public-info-rolebinding.yaml
// bindata/v3.11.0/kube-controller-manager/public-info.yaml
// bindata/v3.11.0/kube-controller-manager/sa.yaml
// bindata/v3.11.0/kube-controller-manager/svc.yaml
// DO NOT EDIT!

package v311_00_assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _v3110KubeControllerManagerCmYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  namespace: openshift-kube-controller-manager
  name: deployment-controller-manager-config
data:
  config.yaml:
`)

func v3110KubeControllerManagerCmYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerCmYaml, nil
}

func v3110KubeControllerManagerCmYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerCmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/cm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerDefaultconfigYaml = []byte(`apiVersion: kubecontrolplane.config.openshift.io/v1
kind: KubeControllerManagerConfig
extendedArguments:
  enable-dynamic-provisioning:
  - "true"
  allocate-node-cidrs:
  - "true"
  configure-cloud-routes:
  - "false"
  cluster-cidr:
  - "10.2.0.0/16"
  service-cluster-ip-range:
  - "10.3.0.0/16"
  use-service-account-credentials:
  - "true"
  leader-elect:
  - "true"
  leader-elect-retry-period:
  - "3s"
  leader-elect-resource-lock:
  - "configmaps"
  controllers:
  - "*"
  - "-ttl" # TODO: this is excluded in kube-core, but not in #21092
  - "-bootstrapsigner"
  - "-tokencleaner"
  - "-horizontalpodautoscaling"
  node-monitor-grace-period:
  - "5m" # TODO: set to 2m for AWS like kube-core does
  pod-eviction-timeout:
  - "5m" # TODO: set to 220s for AWS like kube-core does
  experimental-cluster-signing-duration:
  - "720h"
  port:
  - "10252"
`)

func v3110KubeControllerManagerDefaultconfigYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerDefaultconfigYaml, nil
}

func v3110KubeControllerManagerDefaultconfigYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerDefaultconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/defaultconfig.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerDeploymentYaml = []byte(`apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: openshift-kube-controller-manager
  name: controller-manager
  labels:
    app: openshift-kube-controller-manager
    controller-manager: "true"
spec:
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: openshift-kube-controller-manager
      controller-manager: "true"
  template:
    metadata:
      name: openshift-kube-controller-manager
      labels:
        app: openshift-kube-controller-manager
        controller-manager: "true"
    spec:
      serviceAccountName: openshift-kube-controller-manager-sa
      containers:
      - name: controller-manager
        image: ${IMAGE}
        imagePullPolicy: IfNotPresent
        command: ["hypershift", "openshift-kube-controller-manager"]
        args:
        - "--config=/var/run/configmaps/config/config.yaml"
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/run/configmaps/config
          name: config
        - mountPath: /var/run/configmaps/aggregator-client-ca
          name: aggregator-client-ca
        - mountPath: /var/run/configmaps/client-ca
          name: client-ca
        - mountPath: /var/run/configmaps/etcd-serving-ca
          name: etcd-serving-ca
        - mountPath: /var/run/configmaps/kubelet-serving-ca
          name: kubelet-serving-ca
        - mountPath: /var/run/configmaps/sa-token-signing-certs
          name: sa-token-signing-certs
        - mountPath: /var/run/secrets/aggregator-client
          name: aggregator-client
        - mountPath: /var/run/secrets/etcd-client
          name: etcd-client
        - mountPath: /var/run/secrets/kubelet-client
          name: kubelet-client
        - mountPath: /var/run/secrets/serving-cert
          name: serving-cert
      volumes:
      - name: config
        configMap:
          name: deployment-controller-manager-config
      - name: aggregator-client-ca
        configMap:
          name: aggregator-client-ca
      - name: client-ca
        configMap:
          name: client-ca
      - name: etcd-serving-ca
        configMap:
          name: etcd-serving-ca
      - name: kubelet-serving-ca
        configMap:
          name: kubelet-serving-ca
      - name: sa-token-signing-certs
        configMap:
          name: sa-token-signing-certs
      - name: aggregator-client
        secret:
          secretName: aggregator-client
      - name: etcd-client
        secret:
          secretName: etcd-client
      - name: kubelet-client
        secret:
          secretName: kubelet-client
      - name: serving-cert
        secret:
          secretName: serving-cert
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - operator: Exists
`)

func v3110KubeControllerManagerDeploymentYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerDeploymentYaml, nil
}

func v3110KubeControllerManagerDeploymentYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerOpenshiftKubeControllerManagerNsYaml = []byte(`apiVersion: v1
kind: Namespace
metadata:
  name: openshift-kube-controller-manager
  labels:
    openshift.io/run-level: "0"`)

func v3110KubeControllerManagerOpenshiftKubeControllerManagerNsYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerOpenshiftKubeControllerManagerNsYaml, nil
}

func v3110KubeControllerManagerOpenshiftKubeControllerManagerNsYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerOpenshiftKubeControllerManagerNsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/openshift-kube-controller-manager-ns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerOperatorConfigYaml = []byte(`apiVersion: kubecontrollermanager.operator.openshift.io/v1alpha1
kind: KubeControllerManagerOperatorConfig
metadata:
  name: instance
spec:
  managementState: Managed
  imagePullSpec: openshift/origin-hypershift:latest
  version: 3.11.0
  logging:
    level: 4
  replicas: 2
`)

func v3110KubeControllerManagerOperatorConfigYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerOperatorConfigYaml, nil
}

func v3110KubeControllerManagerOperatorConfigYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerOperatorConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/operator-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerPublicInfoRoleYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: openshift-kube-controller-manager
  name: system:openshift:operator:kube-controller-manager:public
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  resourceNames:
  - public-info
`)

func v3110KubeControllerManagerPublicInfoRoleYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerPublicInfoRoleYaml, nil
}

func v3110KubeControllerManagerPublicInfoRoleYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerPublicInfoRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/public-info-role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerPublicInfoRolebindingYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: openshift-kube-controller-manager
  name: system:openshift:operator:kube-controller-manager:public
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system:openshift:operator:kube-controller-manager:public
subjects:
- kind: Group
  name: system:authenticated
`)

func v3110KubeControllerManagerPublicInfoRolebindingYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerPublicInfoRolebindingYaml, nil
}

func v3110KubeControllerManagerPublicInfoRolebindingYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerPublicInfoRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/public-info-rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerPublicInfoYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  namespace: openshift-kube-controller-manager
  name: public-info
data:
  # version is the current of the kube-controller-manager.  It is updated *after* it is being served consistently.
  version:
  # imagePolicyConfig.internalRegistryHostname is internal registry used for imagePolicyAdmission
  # TODO this probably won't make it to 4.0, we're likely to stuff the entire imagePolicyAdmission config in here
  imagePolicyConfig.internalRegistryHostname:
  # imagePolicyConfig.externalRegistryHostname is external registry used for imagePolicyAdmission
  # TODO this probably won't make it to 4.0, we're likely to stuff the entire imagePolicyAdmission config in here
  imagePolicyConfig.externalRegistryHostname:
  # defaultNodeSelector is used when no specific node selector is on a namespace
  # TODO we'd really like to see this collapsed onto upstream values
  projectConfig.defaultNodeSelector:`)

func v3110KubeControllerManagerPublicInfoYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerPublicInfoYaml, nil
}

func v3110KubeControllerManagerPublicInfoYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerPublicInfoYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/public-info.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerSaYaml = []byte(`apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: openshift-kube-controller-manager
  name: openshift-kube-controller-manager-sa
`)

func v3110KubeControllerManagerSaYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerSaYaml, nil
}

func v3110KubeControllerManagerSaYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerSaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/sa.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110KubeControllerManagerSvcYaml = []byte(`apiVersion: v1
kind: Service
metadata:
  namespace: openshift-kube-controller-manager
  name: controller-manager
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: serving-cert
    prometheus.io/scrape: "true"
    prometheus.io/scheme: https
spec:
  selector:
    controller-manager: "true"
  ports:
  - name: https
    port: 443
    targetPort: 8443
`)

func v3110KubeControllerManagerSvcYamlBytes() ([]byte, error) {
	return _v3110KubeControllerManagerSvcYaml, nil
}

func v3110KubeControllerManagerSvcYaml() (*asset, error) {
	bytes, err := v3110KubeControllerManagerSvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/kube-controller-manager/svc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"v3.11.0/kube-controller-manager/cm.yaml":                                   v3110KubeControllerManagerCmYaml,
	"v3.11.0/kube-controller-manager/defaultconfig.yaml":                        v3110KubeControllerManagerDefaultconfigYaml,
	"v3.11.0/kube-controller-manager/deployment.yaml":                           v3110KubeControllerManagerDeploymentYaml,
	"v3.11.0/kube-controller-manager/openshift-kube-controller-manager-ns.yaml": v3110KubeControllerManagerOpenshiftKubeControllerManagerNsYaml,
	"v3.11.0/kube-controller-manager/operator-config.yaml":                      v3110KubeControllerManagerOperatorConfigYaml,
	"v3.11.0/kube-controller-manager/public-info-role.yaml":                     v3110KubeControllerManagerPublicInfoRoleYaml,
	"v3.11.0/kube-controller-manager/public-info-rolebinding.yaml":              v3110KubeControllerManagerPublicInfoRolebindingYaml,
	"v3.11.0/kube-controller-manager/public-info.yaml":                          v3110KubeControllerManagerPublicInfoYaml,
	"v3.11.0/kube-controller-manager/sa.yaml":                                   v3110KubeControllerManagerSaYaml,
	"v3.11.0/kube-controller-manager/svc.yaml":                                  v3110KubeControllerManagerSvcYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"v3.11.0": {nil, map[string]*bintree{
		"kube-controller-manager": {nil, map[string]*bintree{
			"cm.yaml":            {v3110KubeControllerManagerCmYaml, map[string]*bintree{}},
			"defaultconfig.yaml": {v3110KubeControllerManagerDefaultconfigYaml, map[string]*bintree{}},
			"deployment.yaml":    {v3110KubeControllerManagerDeploymentYaml, map[string]*bintree{}},
			"openshift-kube-controller-manager-ns.yaml": {v3110KubeControllerManagerOpenshiftKubeControllerManagerNsYaml, map[string]*bintree{}},
			"operator-config.yaml":                      {v3110KubeControllerManagerOperatorConfigYaml, map[string]*bintree{}},
			"public-info-role.yaml":                     {v3110KubeControllerManagerPublicInfoRoleYaml, map[string]*bintree{}},
			"public-info-rolebinding.yaml":              {v3110KubeControllerManagerPublicInfoRolebindingYaml, map[string]*bintree{}},
			"public-info.yaml":                          {v3110KubeControllerManagerPublicInfoYaml, map[string]*bintree{}},
			"sa.yaml":                                   {v3110KubeControllerManagerSaYaml, map[string]*bintree{}},
			"svc.yaml":                                  {v3110KubeControllerManagerSvcYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
